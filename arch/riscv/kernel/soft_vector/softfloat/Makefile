# SPDX-License-Identifier: GPL-2.0-only
#
# Makefile for the RISC-V Linux kernel
#
obj-$(CONFIG_VECTOR_EMU)+= f128_add.o
obj-$(CONFIG_VECTOR_EMU)+= f128_classify.o
obj-$(CONFIG_VECTOR_EMU)+= f128_div.o
obj-$(CONFIG_VECTOR_EMU)+= f128_eq.o
obj-$(CONFIG_VECTOR_EMU)+= f128_eq_signaling.o
obj-$(CONFIG_VECTOR_EMU)+= f128_isSignalingNaN.o
obj-$(CONFIG_VECTOR_EMU)+= f128_le.o
obj-$(CONFIG_VECTOR_EMU)+= f128_le_quiet.o
obj-$(CONFIG_VECTOR_EMU)+= f128_lt.o
obj-$(CONFIG_VECTOR_EMU)+= f128_lt_quiet.o
obj-$(CONFIG_VECTOR_EMU)+= f128_mulAdd.o
obj-$(CONFIG_VECTOR_EMU)+= f128_mul.o
obj-$(CONFIG_VECTOR_EMU)+= f128_rem.o
obj-$(CONFIG_VECTOR_EMU)+= f128_roundToInt.o
obj-$(CONFIG_VECTOR_EMU)+= f128_sqrt.o
obj-$(CONFIG_VECTOR_EMU)+= f128_sub.o
obj-$(CONFIG_VECTOR_EMU)+= f128_to_f16.o
obj-$(CONFIG_VECTOR_EMU)+= f128_to_f32.o
obj-$(CONFIG_VECTOR_EMU)+= f128_to_f64.o
obj-$(CONFIG_VECTOR_EMU)+= f128_to_i32.o
obj-$(CONFIG_VECTOR_EMU)+= f128_to_i32_r_minMag.o
obj-$(CONFIG_VECTOR_EMU)+= f128_to_i64.o
obj-$(CONFIG_VECTOR_EMU)+= f128_to_i64_r_minMag.o
obj-$(CONFIG_VECTOR_EMU)+= f128_to_ui32.o
obj-$(CONFIG_VECTOR_EMU)+= f128_to_ui32_r_minMag.o
obj-$(CONFIG_VECTOR_EMU)+= f128_to_ui64.o
obj-$(CONFIG_VECTOR_EMU)+= f128_to_ui64_r_minMag.o
obj-$(CONFIG_VECTOR_EMU)+= f16_add.o
obj-$(CONFIG_VECTOR_EMU)+= f16_classify.o
obj-$(CONFIG_VECTOR_EMU)+= f16_div.o
obj-$(CONFIG_VECTOR_EMU)+= f16_eq.o
obj-$(CONFIG_VECTOR_EMU)+= f16_eq_signaling.o
obj-$(CONFIG_VECTOR_EMU)+= f16_isSignalingNaN.o
obj-$(CONFIG_VECTOR_EMU)+= f16_le.o
obj-$(CONFIG_VECTOR_EMU)+= f16_le_quiet.o
obj-$(CONFIG_VECTOR_EMU)+= f16_lt.o
obj-$(CONFIG_VECTOR_EMU)+= f16_lt_quiet.o
obj-$(CONFIG_VECTOR_EMU)+= f16_mulAdd.o
obj-$(CONFIG_VECTOR_EMU)+= f16_mul.o
obj-$(CONFIG_VECTOR_EMU)+= f16_rem.o
obj-$(CONFIG_VECTOR_EMU)+= f16_roundToInt.o
obj-$(CONFIG_VECTOR_EMU)+= f16_sqrt.o
obj-$(CONFIG_VECTOR_EMU)+= f16_sub.o
obj-$(CONFIG_VECTOR_EMU)+= f16_to_f128.o
obj-$(CONFIG_VECTOR_EMU)+= f16_to_f32.o
obj-$(CONFIG_VECTOR_EMU)+= f16_to_f64.o
obj-$(CONFIG_VECTOR_EMU)+= f16_to_i8.o
obj-$(CONFIG_VECTOR_EMU)+= f16_to_i16.o
obj-$(CONFIG_VECTOR_EMU)+= f16_to_i32.o
obj-$(CONFIG_VECTOR_EMU)+= f16_to_i32_r_minMag.o
obj-$(CONFIG_VECTOR_EMU)+= f16_to_i64.o
obj-$(CONFIG_VECTOR_EMU)+= f16_to_i64_r_minMag.o
obj-$(CONFIG_VECTOR_EMU)+= f16_to_ui8.o
obj-$(CONFIG_VECTOR_EMU)+= f16_to_ui16.o
obj-$(CONFIG_VECTOR_EMU)+= f16_to_ui32.o
obj-$(CONFIG_VECTOR_EMU)+= f16_to_ui32_r_minMag.o
obj-$(CONFIG_VECTOR_EMU)+= f16_to_ui64.o
obj-$(CONFIG_VECTOR_EMU)+= f16_to_ui64_r_minMag.o
obj-$(CONFIG_VECTOR_EMU)+= f32_add.o
obj-$(CONFIG_VECTOR_EMU)+= f32_classify.o
obj-$(CONFIG_VECTOR_EMU)+= f32_div.o
obj-$(CONFIG_VECTOR_EMU)+= f32_eq.o
obj-$(CONFIG_VECTOR_EMU)+= f32_eq_signaling.o
obj-$(CONFIG_VECTOR_EMU)+= f32_isSignalingNaN.o
obj-$(CONFIG_VECTOR_EMU)+= f32_le.o
obj-$(CONFIG_VECTOR_EMU)+= f32_le_quiet.o
obj-$(CONFIG_VECTOR_EMU)+= f32_lt.o
obj-$(CONFIG_VECTOR_EMU)+= f32_lt_quiet.o
obj-$(CONFIG_VECTOR_EMU)+= f32_mulAdd.o
obj-$(CONFIG_VECTOR_EMU)+= f32_mul.o
obj-$(CONFIG_VECTOR_EMU)+= f32_rem.o
obj-$(CONFIG_VECTOR_EMU)+= f32_roundToInt.o
obj-$(CONFIG_VECTOR_EMU)+= f32_sqrt.o
obj-$(CONFIG_VECTOR_EMU)+= f32_sub.o
obj-$(CONFIG_VECTOR_EMU)+= f32_to_f128.o
obj-$(CONFIG_VECTOR_EMU)+= f32_to_f16.o
obj-$(CONFIG_VECTOR_EMU)+= f32_to_f64.o
obj-$(CONFIG_VECTOR_EMU)+= f32_to_i16.o
obj-$(CONFIG_VECTOR_EMU)+= f32_to_i32.o
obj-$(CONFIG_VECTOR_EMU)+= f32_to_i32_r_minMag.o
obj-$(CONFIG_VECTOR_EMU)+= f32_to_i64.o
obj-$(CONFIG_VECTOR_EMU)+= f32_to_i64_r_minMag.o
obj-$(CONFIG_VECTOR_EMU)+= f32_to_ui16.o
obj-$(CONFIG_VECTOR_EMU)+= f32_to_ui32.o
obj-$(CONFIG_VECTOR_EMU)+= f32_to_ui32_r_minMag.o
obj-$(CONFIG_VECTOR_EMU)+= f32_to_ui64.o
obj-$(CONFIG_VECTOR_EMU)+= f32_to_ui64_r_minMag.o
obj-$(CONFIG_VECTOR_EMU)+= f64_add.o
obj-$(CONFIG_VECTOR_EMU)+= f64_classify.o
obj-$(CONFIG_VECTOR_EMU)+= f64_div.o
obj-$(CONFIG_VECTOR_EMU)+= f64_eq.o
obj-$(CONFIG_VECTOR_EMU)+= f64_eq_signaling.o
obj-$(CONFIG_VECTOR_EMU)+= f64_isSignalingNaN.o
obj-$(CONFIG_VECTOR_EMU)+= f64_le.o
obj-$(CONFIG_VECTOR_EMU)+= f64_le_quiet.o
obj-$(CONFIG_VECTOR_EMU)+= f64_lt.o
obj-$(CONFIG_VECTOR_EMU)+= f64_lt_quiet.o
obj-$(CONFIG_VECTOR_EMU)+= f64_mulAdd.o
obj-$(CONFIG_VECTOR_EMU)+= f64_mul.o
obj-$(CONFIG_VECTOR_EMU)+= f64_rem.o
obj-$(CONFIG_VECTOR_EMU)+= f64_roundToInt.o
obj-$(CONFIG_VECTOR_EMU)+= f64_sqrt.o
obj-$(CONFIG_VECTOR_EMU)+= f64_sub.o
obj-$(CONFIG_VECTOR_EMU)+= f64_to_f128.o
obj-$(CONFIG_VECTOR_EMU)+= f64_to_f16.o
obj-$(CONFIG_VECTOR_EMU)+= f64_to_f32.o
obj-$(CONFIG_VECTOR_EMU)+= f64_to_i32.o
obj-$(CONFIG_VECTOR_EMU)+= f64_to_i32_r_minMag.o
obj-$(CONFIG_VECTOR_EMU)+= f64_to_i64.o
obj-$(CONFIG_VECTOR_EMU)+= f64_to_i64_r_minMag.o
obj-$(CONFIG_VECTOR_EMU)+= f64_to_ui32.o
obj-$(CONFIG_VECTOR_EMU)+= f64_to_ui32_r_minMag.o
obj-$(CONFIG_VECTOR_EMU)+= f64_to_ui64.o
obj-$(CONFIG_VECTOR_EMU)+= f64_to_ui64_r_minMag.o
obj-$(CONFIG_VECTOR_EMU)+= fall_maxmin.o
obj-$(CONFIG_VECTOR_EMU)+= i32_to_f128.o
obj-$(CONFIG_VECTOR_EMU)+= i32_to_f16.o
obj-$(CONFIG_VECTOR_EMU)+= i32_to_f32.o
obj-$(CONFIG_VECTOR_EMU)+= i32_to_f64.o
obj-$(CONFIG_VECTOR_EMU)+= i64_to_f128.o
obj-$(CONFIG_VECTOR_EMU)+= i64_to_f16.o
obj-$(CONFIG_VECTOR_EMU)+= i64_to_f32.o
obj-$(CONFIG_VECTOR_EMU)+= i64_to_f64.o
obj-$(CONFIG_VECTOR_EMU)+= s_add128.o
obj-$(CONFIG_VECTOR_EMU)+= s_add256M.o
obj-$(CONFIG_VECTOR_EMU)+= s_addCarryM.o
obj-$(CONFIG_VECTOR_EMU)+= s_addComplCarryM.o
obj-$(CONFIG_VECTOR_EMU)+= s_addMagsF128.o
obj-$(CONFIG_VECTOR_EMU)+= s_addMagsF16.o
obj-$(CONFIG_VECTOR_EMU)+= s_addMagsF32.o
obj-$(CONFIG_VECTOR_EMU)+= s_addMagsF64.o
obj-$(CONFIG_VECTOR_EMU)+= s_addM.o
obj-$(CONFIG_VECTOR_EMU)+= s_approxRecip_1Ks.o
obj-$(CONFIG_VECTOR_EMU)+= s_approxRecip32_1.o
obj-$(CONFIG_VECTOR_EMU)+= s_approxRecipSqrt_1Ks.o
obj-$(CONFIG_VECTOR_EMU)+= s_approxRecipSqrt32_1.o
obj-$(CONFIG_VECTOR_EMU)+= s_commonNaNToF32UI.o
obj-$(CONFIG_VECTOR_EMU)+= s_commonNaNToF64UI.o
obj-$(CONFIG_VECTOR_EMU)+= s_compare128M.o
obj-$(CONFIG_VECTOR_EMU)+= s_compare96M.o
obj-$(CONFIG_VECTOR_EMU)+= s_countLeadingZeros16.o
obj-$(CONFIG_VECTOR_EMU)+= s_countLeadingZeros32.o
obj-$(CONFIG_VECTOR_EMU)+= s_countLeadingZeros64.o
obj-$(CONFIG_VECTOR_EMU)+= s_countLeadingZeros8.o
obj-$(CONFIG_VECTOR_EMU)+= s_eq128.o
obj-$(CONFIG_VECTOR_EMU)+= s_f32UIToCommonNaN.o
obj-$(CONFIG_VECTOR_EMU)+= s_f64UIToCommonNaN.o
obj-$(CONFIG_VECTOR_EMU)+= s_le128.o
obj-$(CONFIG_VECTOR_EMU)+= s_lt128.o
obj-$(CONFIG_VECTOR_EMU)+= s_mul128By32.o
obj-$(CONFIG_VECTOR_EMU)+= s_mul128MTo256M.o
obj-$(CONFIG_VECTOR_EMU)+= s_mul128To256M.o
obj-$(CONFIG_VECTOR_EMU)+= s_mul64ByShifted32To128.o
obj-$(CONFIG_VECTOR_EMU)+= s_mul64To128.o
obj-$(CONFIG_VECTOR_EMU)+= s_mul64To128M.o
obj-$(CONFIG_VECTOR_EMU)+= s_mulAddF128.o
obj-$(CONFIG_VECTOR_EMU)+= s_mulAddF16.o
obj-$(CONFIG_VECTOR_EMU)+= s_mulAddF32.o
obj-$(CONFIG_VECTOR_EMU)+= s_mulAddF64.o
obj-$(CONFIG_VECTOR_EMU)+= s_negXM.o
obj-$(CONFIG_VECTOR_EMU)+= s_normRoundPackToF128.o
obj-$(CONFIG_VECTOR_EMU)+= s_normRoundPackToF16.o
obj-$(CONFIG_VECTOR_EMU)+= s_normRoundPackToF32.o
obj-$(CONFIG_VECTOR_EMU)+= s_normRoundPackToF64.o
obj-$(CONFIG_VECTOR_EMU)+= s_normSubnormalF128Sig.o
obj-$(CONFIG_VECTOR_EMU)+= s_normSubnormalF16Sig.o
obj-$(CONFIG_VECTOR_EMU)+= s_normSubnormalF32Sig.o
obj-$(CONFIG_VECTOR_EMU)+= s_normSubnormalF64Sig.o
obj-$(CONFIG_VECTOR_EMU)+= softfloat_raiseFlags.o
obj-$(CONFIG_VECTOR_EMU)+= softfloat_state.o
obj-$(CONFIG_VECTOR_EMU)+= s_propagateNaNF16UI.o
obj-$(CONFIG_VECTOR_EMU)+= s_propagateNaNF32UI.o
obj-$(CONFIG_VECTOR_EMU)+= s_propagateNaNF64UI.o
obj-$(CONFIG_VECTOR_EMU)+= s_propagateNaNF128UI.o
obj-$(CONFIG_VECTOR_EMU)+= s_remStepMBy32.o
obj-$(CONFIG_VECTOR_EMU)+= s_roundMToI64.o
obj-$(CONFIG_VECTOR_EMU)+= s_roundMToUI64.o
obj-$(CONFIG_VECTOR_EMU)+= s_roundPackMToI64.o
obj-$(CONFIG_VECTOR_EMU)+= s_roundPackMToUI64.o
obj-$(CONFIG_VECTOR_EMU)+= s_roundPackToF128.o
obj-$(CONFIG_VECTOR_EMU)+= s_roundPackToF16.o
obj-$(CONFIG_VECTOR_EMU)+= s_roundPackToF32.o
obj-$(CONFIG_VECTOR_EMU)+= s_roundPackToF64.o
obj-$(CONFIG_VECTOR_EMU)+= s_roundPackToI32.o
obj-$(CONFIG_VECTOR_EMU)+= s_roundPackToI64.o
obj-$(CONFIG_VECTOR_EMU)+= s_roundPackToUI32.o
obj-$(CONFIG_VECTOR_EMU)+= s_roundPackToUI64.o
obj-$(CONFIG_VECTOR_EMU)+= s_roundToI32.o
obj-$(CONFIG_VECTOR_EMU)+= s_roundToI64.o
obj-$(CONFIG_VECTOR_EMU)+= s_roundToUI32.o
obj-$(CONFIG_VECTOR_EMU)+= s_roundToUI64.o
obj-$(CONFIG_VECTOR_EMU)+= s_shiftRightJam128.o
obj-$(CONFIG_VECTOR_EMU)+= s_shiftRightJam128Extra.o
obj-$(CONFIG_VECTOR_EMU)+= s_shiftRightJam256M.o
obj-$(CONFIG_VECTOR_EMU)+= s_shiftRightJam32.o
obj-$(CONFIG_VECTOR_EMU)+= s_shiftRightJam64.o
obj-$(CONFIG_VECTOR_EMU)+= s_shiftRightJam64Extra.o
obj-$(CONFIG_VECTOR_EMU)+= s_shortShiftLeft128.o
obj-$(CONFIG_VECTOR_EMU)+= s_shortShiftLeft64To96M.o
obj-$(CONFIG_VECTOR_EMU)+= s_shortShiftRight128.o
obj-$(CONFIG_VECTOR_EMU)+= s_shortShiftRightExtendM.o
obj-$(CONFIG_VECTOR_EMU)+= s_shortShiftRightJam128.o
obj-$(CONFIG_VECTOR_EMU)+= s_shortShiftRightJam128Extra.o
obj-$(CONFIG_VECTOR_EMU)+= s_shortShiftRightJam64.o
obj-$(CONFIG_VECTOR_EMU)+= s_shortShiftRightJam64Extra.o
obj-$(CONFIG_VECTOR_EMU)+= s_shortShiftRightM.o
obj-$(CONFIG_VECTOR_EMU)+= s_sub128.o
obj-$(CONFIG_VECTOR_EMU)+= s_sub1XM.o
obj-$(CONFIG_VECTOR_EMU)+= s_sub256M.o
obj-$(CONFIG_VECTOR_EMU)+= s_subMagsF128.o
obj-$(CONFIG_VECTOR_EMU)+= s_subMagsF16.o
obj-$(CONFIG_VECTOR_EMU)+= s_subMagsF32.o
obj-$(CONFIG_VECTOR_EMU)+= s_subMagsF64.o
obj-$(CONFIG_VECTOR_EMU)+= s_subM.o
obj-$(CONFIG_VECTOR_EMU)+= ui32_to_f128.o
obj-$(CONFIG_VECTOR_EMU)+= ui32_to_f16.o
obj-$(CONFIG_VECTOR_EMU)+= ui32_to_f32.o
obj-$(CONFIG_VECTOR_EMU)+= ui32_to_f64.o
obj-$(CONFIG_VECTOR_EMU)+= ui64_to_f128.o
obj-$(CONFIG_VECTOR_EMU)+= ui64_to_f16.o
obj-$(CONFIG_VECTOR_EMU)+= ui64_to_f32.o
obj-$(CONFIG_VECTOR_EMU)+= ui64_to_f64.o
clean:
